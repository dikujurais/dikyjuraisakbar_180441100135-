#BAB 1
Class VS Objek
    
    Class adalah Prototipe yang ditentukan pengguna untuk objek yang mendefinisikan seperangkat atribut yang menjadi ciri objek kelas apa pun. Atribut adalah data anggota (variabel kelas dan variabel contoh) dan metode, diakses melalui notasi titik, dan Objek  Adalah Contoh unik dari struktur data yang didefinisikan oleh kelasnya. Objek terdiri dari kedua anggota data (variabel kelas dan variabel contoh) dan metode.
    
    Untuk Membuat Statement class digunakan untuk membuat definisi kelas baru. Nama kelas segera mengikuti kelas kata kunci diikuti oleh titik dua sebagai berikut.
    
    class namaClass () :
        def methode 1 (self) :
            Isi metodenya
        def metodhe 2 (self) :
            Isi metodenya
            
    Dalam terminologi pemograman berbasis objek, terdapat istilah kosntruktor dan destruktor, Konstruktor adalah metode yang akan dijalankan ketika objek diciptakan, sedangkan destruktor adalah metode yang akan dijalankan ketika objek dimusnahkan. di dalam python, konstruktor berupa metode dengan nama __init__, contohnya adalah
    
    class namaclass():
        def __init__(sel,parameter):
            self.nama = nama 
        def metode (self,paramater)
            isi metode
            
Untuk memanggil Sebuah Class, kita harus memberikan nilai pada class tersebut, contohnya:

    class kubus:
    def __init__(self,s):
        self.sisi=5
    
    def tampilkansisi(self):
        print(self.sisi)
        
    def luas(self):
        print("luas= ",self.sisi**2)
    
    def volume(self):
        print("volume ",self.sisi**3)
    
    
kubus1=kubus(4)
kubus1.tampilkansisi()
kubus1.luas()
kubus1.volume()

dan Outpunya akan seperti ini:
5
luas=  25
volume  125



#BAB 2
INHERITANCE(Pewarisan)

    Inheritance atau pewarisan adalah fitur pada pemograman berbasis objek yang memungkinkan suatu kelas diturunkan dari kelas lain. Fitur ini membuat pemograman mengembangkan suatu kelas berdasarkan kelas lain tanpa harus meulis ulang dari nol.Obyek memiliki field berupa variabel obyek dan method berupa fungsi obyek. Keduanya disebut atribut obyek. Class juga dapat memiliki field class (variabel class) dan method class. Class didefinisikan dengan keyword class
    
    Contohnya seperti ini :
    
class user :
    name = ""
    def __init__ (self,name):
        self.nama = name
    def printnama(self):
        print("name =",self.nama)
class programmer(user):
    def __init__(self,name):
        self.nama = name
    def dopython(self):
        print("programming python")
        
brian = user("brian")
brian.printnama()
diana = programmer("diana")
diana.printnama()
diana.dopython()

dan outputnya adalah:
name = brian
name = diana
programming python

#BAB 3
TYPE OF INHERITANCE

inheritance mempunyai 4 type:
1.Default
2.Overriding
3.Super property
4.Multiple

1. Default:

    class Fish: 
        def __init__(self, first_name, last_name="Fish", skeleton="bone", eyelids=False): 
            self.first_name = first_name 
            self.last_name = last_name 
            self.skeleton = skeleton 
            self.eyelids = eyelids 
        def swim(self): 
            print("The fish is swimming.") 
        def swim_backwards(self): 
            print("The fish can swim backwards."
     class Trout (Fish): 
        pass 
     class Clownfish(Fish): 
        def live_with_anemone(self): 
            print("The clownfish is coexisting with sea anemone.") 

2.Overriding: 

    class Fish: 
        def __init__(self, first_name, last_name="Fish", skeleton="bone", eyelids=False): 
            self.first_name = first_name 
            self.last_name = last_name 
            self.skeleton = skeleton 
            self.eyelids = eyelids 
        def swim(self): 
            print("The fish is swimming.") 
        def swim_backwards(self): 
            print("The fish can swim backwards.") 
   
    class Shark(Fish): 
        def __init__(self, first_name, last_name="Shark", skeleton="cartilage", eyelids=True): 
            self.first_name = first_name 
            self.last_name = last_name 
            self.skeleton = skeleton 
            self.eyelids = eyelids 
        def swim_backwards(self): 
            print("The shark cannot swim backwards, but can sink backwards.") 

3.Super:

    class Trout(Fish):
            def __init__(self,water,first_name, last_name,skeleton,eyelids):
            self.water = water
            Fish.__init__(self,first_name, last_name,skeleton, eyelids)
            super().__init__(self,first_name, last_name,skeleton, eyelids)

    terry = Trout("freshwater","shark","fish","no bone","true")
    print(terry.first_name)
    
contohnya seperti ini:

class orang:
    def __init__(self,nama):
        self.nama = nama
    def tampilkan(self):
        print("nama saya",self.nama)
        
class karyawan(orang):
    def __init__(self,kp,nama):
        super().__init__(nama)
        self.kodepegawai = kp
    def tampilkan(self):
        print("kode pegawai",self.kodepegawai,)
        
class karyawancabang(karyawan):
    def __init__(self,klc,kp,nama):
        super().__init__(nama,kp)
        self.kodelokasicabang = klc
    def tampilkan(self):
        print("kode lokasi cabang",self.kodelokasicabang,)

o1 = orang("diky")
o1.tampilkan()
o2 = karyawan("0812","diky")
o2.tampilkan()
o3 = karyawancabang("001","diky","0812")
o3.tampilkan()

outputnya adalah:
nama saya diky
kode pegawai 123
kode lokasi cabang 001

4. multiple:

    class Coral: 
        def community(self): 
            print("Coral lives in a community.") 

    class Anemone: 
        def protect_clownfish(self): 
            print("The anemone is protecting the clownfish.") 

    class CoralReef(Coral, Anemone): 
        pass 
      
    great_barrier = CoralReef() 
    great_barrier.community() 
    great_barrier.protect_clownfish() 
    
 Outputnya adalah:

Coral lives in a community.
The anemone is protecting the clownfish.


#BAB 4
POLYMORPHISME

Poli yang berarti (banyak) dan morfisme yang berarti (bentuk).
Kami akan membuat struktur yang dapat mengambil atau menggunakan banyak bentuk objek.

class Shark():
    def swim(self):
        print("The shark is swimming.")
    def swim_backwards(self):
        print("The shark cannot swim backwards, but can sink backwards.")
    def skeleton(self):
        print("The shark's skeleton is made of cartilage.")

class Clownfish():
    def swim(self):
        print("The clownfish is swimming.")
    def swim_backwards(self):
        print("The clownfish can swim backwards.")
    def skeleton(self):
        print("The clownfish's skeleton is made of bone.")

sammy = Shark()
sammy.skeleton()

casey = Clownfish()
casey.skeleton()

outputnya adalah

The shark's skeleton is made of cartilage.
The clownfish's skeleton is made of bone.

banyak jenis polymorphisme antara lain:

1.Polymorphism with a Function


class shark():
    def swim(self):
        print("the sharknis swimming")
        
    def swim_backwards(self):
        print("the shark cannot swim backwards, but can sink backwards")
        
    def skeleton(self):
        print("the shark's skeleton is made or cartilage")
        
class clownfish():
    def swim(self):
        print("the clown fish can swim backwards")
        
    def swim_backwards(self):
        print("the clownfish can swim backwards")
        
    def skeleton(self):
        print("the clownfish skeleton is made of bone")
        
sammy = shark()
sammy.skeleton()
casey = clownfish()
casey.skeleton()

def in_the_pacific(fish):
    fish.swim()

in_the_pacific(sammy)
in_the_pacific(casey)

dan outputnya adalah:
the shark's skeleton is made or cartilage
the clownfish skeleton is made of bone
the sharknis swimming
the clown fish can swim backward

2. polymorphisme with method.

class document:
    def __init__(self,name):
        self.name = name
    def show(self):
        raise notimplementederror("subclass must implement abstract method")
class pdf(document):
    def show(self):
        return 'show pdf contents!'
    
class word(document):
    def show(self):
        return 'show word contents'

document = [pdf('document1'),
           pdf('document2'),
           word('document3')]

for document in document:
    print(document.name + ':' + document.show())
    
JIKA DIRUN:
document1:show pdf contents!
document2:show pdf contents!
document3:show word contents


3. polymorphisme abstarct class

class car:
    def __init__(self,name):
        self.name = name
    def drive(self):
        raise notimplementederror("subclass must implement abstract method")
    def stop(self):
        raise not implementederror("subclass must implement abstract method")

class sportscar(car):
    def drive(self):
        return 'sportscar driving'
    def stop(self):
        return 'sportscar braking'
class truck(car):
    def drive(self):
        return 'truck driving slowly because heaavily loaded'
    def stop(self):
        return 'truck braking'
    
cars = [truck('bananatruck'),
       truck('orangetruck'),
       sportscar('23')]
    
for car in cars:
    print(car.name + ':' + car.drive())
    
Outputnya adalah
bananatruck:truck driving slowly because heaavily loaded
orangetruck:truck driving slowly because heaavily loaded
23:sportscar driving

BAB 5
    
   	 ENCAPSULATION
   
Enkapsulasi adalah pembungkus, maksud pembungkus disini adalah untuk menjaga suatu proses program agar tidak dapat diakses secara sembarangan
atau di intervensi oleh program lain. Konsep enkapsulasi sangat penting dilakukan untuk menjaga kebutuhan program agar dapat diakses sewaktu-waktu
,sekaligus menjaga program tersebut.
Begitulah konsep kerja dari enkapsulasi, dia akan melindungi sebuah program dari akses ataupun intervensi dari program lain yang mempengaruhinya.
Hal ini sangat menjaga keutuhan program yang telah dibuat dengan konsep dan rencana yang sudah ditentukan dari awal.
Enkapsulasi menciptakan abstraksi untuk desain kelas. Jika Anda ingin melindungi beberapa anggota dari kelas dasar maka timbullah situasi 
	enkapsulasi. Dalam konsep ini ada tiga kata kunci yang digunakan. Konsep hak akses ini biasa di sebut Access Modifier.
Access Modifier terdiri dari private, protected, dan public.
Private memberikan hak akses hanya kepada anggota class tersebut untuk menggunakan dan/atau mengubah nilai dari property atau method tersebut.
Protected memberikan hak akses kepada anggota class nya dan anggota class hasil inheritance (penurunan sifat) dari class tersebut.
Public memberikan hak akses kepada property dan method agar dapat digunakan diluar class tersebut.



    "class robot(object):\n",
    "    def __init__(self):\n",
    "        self.__version=22\n",
    "    def getversion(self):\n",
    "        print(self.__version)\n",
    "    def setversion(self,version):\n",
    "        self.__version=version\n",
    "obj=robot()\n",
    "obj.getversion()\n",
    "obj.setversion(23)\n",
    "obj.getversion()\n",
    "#print(obj.__version) salah karena tdk ada pemanggilan classs\n",
    "print(obj._robot__version)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is a public method\n",
      "This is a private method\n",
      "This is another private method\n"
     ]
    }
   ],
   "source": [
    "class A(object):\n",
    "    #public method\n",
    "    def myPublicMethod(self):\n",
    "        return \"This is a public method\"\n",
    "    #private method with single underscore\n",
    "    def _myPrivateMethod(self):\n",
    "        return \"This is a private method\"\n",
    "    #private method with double underscore\n",
    "    def __myAnotherPrivateMethod(self):\n",
    "        return \"This is another private method\"\n",
    "#nama objek\n",
    "obj1 = A()\n",
    "#we can access the public mehod which is cool\n",
    "print(obj1.myPublicMethod())\n",
    "#Note that we can also access the private method from outside\n",
    "print(obj1._myPrivateMethod())\n",
    "print(obj1._A__myAnotherPrivateMethod())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "driving. maxspeed : 200\n",
      "driving. maxspeed : 10\n"
     ]
    }
   ],
   "source": [
    "class Car:\n",
    " \n",
    "    __maxspeed = 0\n",
    "    __name = \"\"\n",
    " \n",
    "    def __init__(self):\n",
    "        self.__maxspeed = 200\n",
    "        self.__name = \"Supercar\"\n",
    " \n",
    "    def drive(self):\n",
    "        print (\"driving. maxspeed : \" + str(self.__maxspeed))\n",
    " \n",
    "redcar = Car()\n",
    "redcar.drive()\n",
    "redcar.__maxspeed = 10  # will not change variable because its private\n",
    "redcar._Car__maxspeed=10 #cara mengubah variabel private\n",
    "redcar.drive()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "updating software\n",
      "driving\n"
     ]
    }
   ],
   "source": [
    "class Car:\n",
    " \n",
    "    def __init__(self):\n",
    "        self.__updateSoftware()\n",
    "\n",
    "    def drive(self):\n",
    "        print ('driving')\n",
    "\n",
    "    def __updateSoftware(self):\n",
    "        print ('updating software')\n",
    " \n",
    "redcar = Car()\n",
    "redcar.drive()\n",
    "#redcar.__updateSoftware()  not accesible from object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nama: Segitiga Sama Sisi\n",
      "Panjang: 5\n",
      "Sisi: 75\n",
      "Nama: Persegi Panjang\n",
      "Panjang: 10\n",
      "Lebar: 15\n",
      "Nama: Lingkaran besar\n",
      "Jari-jari: 21\n"
     ]
    }
   ],
   "source": [
    "class Shape(object):\n",
    "    __nama = 0\n",
    "    def getNama(self):\n",
    "        print (\"Nama:\",self.__nama)\n",
    "    def setNama(self,nama):\n",
    "        self.__nama = nama\n",
    "    \n",
    "class Rectangle(Shape):\n",
    "    __panjang = 0\n",
    "    __lebar = 0\n",
    "    def getPanjangdanLebar(self):\n",
    "        print (\"Panjang:\",self.__panjang)\n",
    "        print (\"Lebar:\",self.__lebar)\n",
    "    def setPanjangdanLebar(self,panjang,lebar):\n",
    "        self.__panjang = panjang\n",
    "        self.__lebar = lebar\n",
    "\n",
    "class Circle(Shape):\n",
    "    __jari2 = 0\n",
    "    def getJari2(self):\n",
    "        print (\"Jari-jari:\",self.__jari2)\n",
    "    def setJari2(self,jari2):\n",
    "        self.__jari2 = jari2\n",
    "\n",
    "class Triangle(Shape):\n",
    "    __panjang = 0\n",
    "    __sisi = 0\n",
    "    def getPanjangdanSisi(self):\n",
    "        print (\"Panjang:\",self.__panjang)\n",
    "        print (\"Sisi:\",self.__sisi)\n",
    "    def setPanjangdanSisi(self,panjang,sisi):\n",
    "        self.__panjang = panjang\n",
    "        self.__sisi = sisi\n",
    "\n",
    "Segitiga = Triangle()\n",
    "Segitiga.setNama (\"Segitiga Sama Sisi\")\n",
    "Segitiga.setPanjangdanSisi(5,75)\n",
    "Segitiga.getNama ()\n",
    "Segitiga.getPanjangdanSisi ()\n",
    "\n",
    "Persegipanjang = Rectangle ()\n",
    "Persegipanjang.setNama (\"Persegi Panjang\")\n",
    "Persegipanjang.setPanjangdanLebar (10,15)\n",
    "Persegipanjang.getNama ()\n",
    "Persegipanjang.getPanjangdanLebar ()\n",
    "\n",
    "Lingkaran = Circle ()\n",
    "Lingkaran.setNama (\"Lingkaran besar\")\n",
    "Lingkaran.setJari2 (21)\n",
    "Lingkaran.getNama ()\n",
    "Lingkaran.getJari2 ()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(58, 10)\n",
      "(46, -4)\n"
     ]
    }
   ],
   "source": [
    "class bilangan:\n",
    "    def __init__(self,a,b):\n",
    "        self.a=a\n",
    "        self.b=b\n",
    "    def __add__(self,other):\n",
    "        return self.a+other.a,self.b+other.b\n",
    "    def __sub__(self,other):\n",
    "        return self.a-other.a,self.b-other.b\n",
    "    def __str__(self):\n",
    "        return self.a,self.b\n",
    "o1=bilangan(52,3)\n",
    "o2=bilangan(6,7)\n",
    "o3=o1+o2\n",
    "o4=o1-o2\n",
    "print (o3)\n",
    "print (o4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}



BAB 6
	
	OPERATOR OVERLOADING
	
Overloading merupakan salah satu konsep dalam pemrogramaan berorientasi objek dimana dalam suatu class terdapat method dengan nama yang sama namun tetapi memiliki berbagai fungsi yang berbeda, tergantung dari parameter yang digunakan.

Contoh penggunaan overloading sederhana dalam python.

class Vektor:
    'Membuat kode program dengan menggunakan teknik overloading'
    'Wawan H Nur 20 mei 2015'

    def __init__(self, a, b):
        self.a = a
        self.b = b

    def __str__(self):
        return 'Vektor (%d, %d)' % (self.a, self.b)

    def __add__(self, other):
        return Vektor(self.a + other.a, self.b + other.b)

v1 = Vektor (5,4)
v2 = Vektor (7, -2)

print v1
print v2

print v1 + v2
	

class Parent:
    def myMethod(self):
        print 'Memanggil method parent'

class Child(Parent):
    def myMethod(self):
        print 'Memanggil method child'

c = Child()
c.myMethod()

c = Parent()
c.myMethod()

>>> class Order:
...     def __init__(self, cart, customer):
...         self.cart = list(cart)
...         self.customer = customer
...
...     def __len__(self):
...         return len(self.cart)
...
>>> order = Order(['banana', 'apple', 'mango'], 'Real Python')
>>> len(order)



